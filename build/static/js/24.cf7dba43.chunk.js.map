{"version":3,"sources":["views/request/ListRequest.js","services/request.js"],"names":["withNamespaces","t","useState","current","pageSize","pagination","setPagination","data","setData","provinceFilter","setProvinceFilter","carTypeFilter","setCarTypeFilter","statusFilter","setStatusFilter","provinces","useSelector","state","carTypes","user","columns","title","dataIndex","render","request_destinations","map","request_destination","type","Type","PICKUP_LOCATION","location","DROP_OFF_LOCATION","province","name","filters","pickup_at","moment","parseInt","format","price","request","displayPrice","role","Roles","AGENCY","discount","Math","round","HOST","base_price","toLocaleString","style","currency","car_type","status","color","Status","REQUEST_NEW","id","REQUEST_CANCELED","toUpperCase","_id","size","to","useEffect","forEach","text","value","carType","socket","getInstance","on","Notification","CONTRACT","getListRequests","res","requests","key","total","REQUEST","xs","md","className","marginBottom","dataSource","onChange","sorter","filter","callback","axios","AxiosConfig","api","get","then","catch","err","response","getToken","createNewRequest","post","calculateRequestPrice","getRequestDetail","getRequestDetailByCode","code","cancelRequest","delete","updateRequestDetail","put"],"mappings":"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","file":"static/js/24.cf7dba43.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport {\r\n    CCol,\r\n    CRow,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader\r\n} from '@coreui/react'\r\nimport { Table, Tag, Space, Button } from 'antd';\r\nimport { Notification, Roles, Status, Type } from 'src/configs';\r\nimport { getListRequests } from 'src/services/request';\r\nimport { Link } from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport { useSelector } from 'react-redux';\r\nimport { withNamespaces } from 'react-i18next';\r\nimport socket from 'src/socket';\r\n  \r\nconst ListRequest = ({ t }) => {\r\n    const [pagination, setPagination] = useState({\r\n        current: 1,\r\n        pageSize: 100,\r\n    });\r\n    const [data, setData] = useState();\r\n    const [provinceFilter, setProvinceFilter] = useState([]);\r\n    const [carTypeFilter, setCarTypeFilter] = useState([]);\r\n    const [statusFilter, setStatusFilter] = useState([]);\r\n\r\n    const provinces = useSelector(state => state.provinces);\r\n    const carTypes = useSelector(state => state.carTypes);\r\n    const user = useSelector(state => state.user);\r\n\r\n    const columns = [\r\n        {\r\n            title: t('ID'),\r\n            dataIndex: 'key',\r\n        },\r\n        {\r\n            title: t('Pickup Location'),\r\n            dataIndex: 'request_destinations',\r\n            render: request_destinations => (\r\n                <>\r\n                {request_destinations.map(request_destination => (\r\n                    (request_destination.type === Type.PICKUP_LOCATION) && (request_destination.location[0])\r\n                ))}\r\n                </>\r\n            )\r\n        },\r\n        {\r\n            title: t('Drop Off Location'),\r\n            dataIndex: 'request_destinations',\r\n            render: request_destinations => (\r\n                <>\r\n                {request_destinations.map(request_destination => (\r\n                    (request_destination.type === Type.DROP_OFF_LOCATION) && (request_destination.location[0])\r\n                ))}\r\n                </>\r\n            )\r\n        },\r\n        {\r\n            title: t('Province'),\r\n            dataIndex: 'province',\r\n            render: province => <>{province.name}</>,\r\n            filters: provinceFilter,\r\n        },\r\n        {\r\n            title: t('Pickup Time'),\r\n            dataIndex: 'pickup_at',\r\n            render: pickup_at => <>{moment(parseInt(pickup_at)).format(\"HH:mm DD-MM-YYYY\")}</>\r\n        },\r\n        {\r\n            title: t('Price'),\r\n            dataIndex: 'price',\r\n            render: (price, request) => {\r\n                let displayPrice;\r\n                if (user.data.role === Roles.AGENCY) {\r\n                    if (request.discount) {\r\n                        displayPrice = price - (price / 100 * request.discount)\r\n                        displayPrice = Math.round(displayPrice / 1000) * 1000;\r\n                    } else {\r\n                        displayPrice = price\r\n                    }\r\n                    \r\n                } else if (user.data.role === Roles.HOST) {\r\n                    displayPrice = request.base_price\r\n                }\r\n                return (\r\n                    <>\r\n                        {displayPrice.toLocaleString('it-IT', {style : 'currency', currency : 'VND'})}\r\n                    </>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            title: t('Car Type'),\r\n            dataIndex: 'car_type',\r\n            render: car_type => <>{car_type.type} Seats</>,\r\n            filters: carTypeFilter,\r\n        },\r\n        {\r\n            title: t('Status'),\r\n            dataIndex: 'status',\r\n            render: status => {\r\n                let color;\r\n                let name;\r\n                if (status === Status.REQUEST_NEW.id) {\r\n                    color = 'green';\r\n                    name  = Status.REQUEST_NEW.name;\r\n                } else if (status === Status.REQUEST_CANCELED.id) {\r\n                    color = 'volcano';\r\n                    name  = Status.REQUEST_CANCELED.name;\r\n                }\r\n                return (\r\n                    <>\r\n                        <Tag color={color} key={name}>\r\n                            {name.toUpperCase()}\r\n                        </Tag>\r\n                    </>\r\n                )\r\n            },\r\n            filters: statusFilter\r\n        },\r\n        {\r\n            title: t('Action'),\r\n            dataIndex: '_id',\r\n            render: (_id) => {\r\n                return (\r\n                    <>\r\n                    <Space size=\"middle\">\r\n                        <Link to={`/requests/${_id}`}>{t(\"Detail\")}</Link>\r\n                    </Space>\r\n                    </>\r\n                )\r\n            }\r\n        },\r\n    ];\r\n\r\n    const handleTableChange = (pagination, filters, sorter) => {\r\n        let key = (pagination.pageSize) * (pagination.current -1) + 1;\r\n        getListRequests(pagination, filters, sorter, (res) => {\r\n            if (res.requests) {\r\n                res.requests.forEach(request => {\r\n                    request.key = key++;\r\n                });\r\n    \r\n                setData(res.requests);\r\n                setPagination({ ...pagination, current: pagination.current, total: res.total });\r\n            }\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (user.data.role === Roles.AGENCY) {\r\n            provinces.forEach(province => {\r\n                setProvinceFilter(provinceFilter => [...provinceFilter, {text: province.name, value: province._id}]);\r\n            });\r\n    \r\n            carTypes.forEach(carType => {\r\n                setCarTypeFilter(carTypeFilter => [...carTypeFilter, {text: `${carType.type} Seats`, value: carType._id}]);\r\n            });\r\n    \r\n            setStatusFilter([\r\n                { text: Status.REQUEST_NEW.name, value: Status.REQUEST_NEW.id },\r\n                { text: Status.REQUEST_CANCELED.name, value: Status.REQUEST_CANCELED.id },\r\n            ]);\r\n\r\n            socket.getInstance(user.data._id, user.data.role).on(\"notification\", (data) => {\r\n                if (data.type && data.type == Notification.CONTRACT) {\r\n                    getListRequests(pagination, {}, {}, (res => {\r\n                        if (res.requests) {\r\n                            let key = 1;\r\n                            res.requests.forEach(request => {\r\n                                request.key = key++;\r\n                            });\r\n            \r\n                            setData(res.requests);\r\n                            setPagination({ ...pagination, total: res.total });\r\n                        }\r\n                    }));\r\n                }\r\n            })\r\n        } else if (user.data.role === Roles.HOST) {\r\n            socket.getInstance(user.data._id, user.data.role).on(\"notification\", (data) => {\r\n                if (data.type && data.type == Notification.REQUEST) {\r\n                    getListRequests(pagination, {}, {}, (res => {\r\n                        if (res.requests) {\r\n                            let key = 1;\r\n                            res.requests.forEach(request => {\r\n                                request.key = key++;\r\n                            });\r\n            \r\n                            setData(res.requests);\r\n                            setPagination({ ...pagination, total: res.total });\r\n                        }\r\n                    }));\r\n                }\r\n            })\r\n        }\r\n\r\n        getListRequests(pagination, {}, {}, (res => {\r\n            if (res.requests) {\r\n                let key = 1;\r\n                res.requests.forEach(request => {\r\n                    request.key = key++;\r\n                });\r\n\r\n                setData(res.requests);\r\n                setPagination({ ...pagination, total: res.total });\r\n            }\r\n        }));\r\n    }, [])\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\" md=\"12\" className=\"mb-4\">\r\n                <CCard>\r\n                    <CCardHeader>\r\n                    {t(\"List Requests\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                        {(user.data.role === Roles.AGENCY) ? \r\n                            <Link to=\"/requests/create\">\r\n                                <Button type=\"primary\" \r\n                                    style={{ marginBottom: 16 }} \r\n                                >\r\n                                    {t(\"Create A New Request\")}\r\n                                </Button>\r\n                            </Link>\r\n                        : null}\r\n                        \r\n                        <Table\r\n                            columns={columns} \r\n                            dataSource={data} \r\n                            pagination={pagination}\r\n                            onChange={handleTableChange}\r\n                        />\r\n                    </CCardBody>\r\n                </CCard>\r\n            </CCol>\r\n        </CRow>\r\n    )\r\n}\r\n\r\nexport default withNamespaces() (ListRequest)","import { AxiosConfig } from \"src/configs\";\r\nimport { getToken } from \"./auth\";\r\n\r\nexport function getListRequests(pagination, filter, sorter, callback) {    \r\n    const axios = AxiosConfig();\r\n\r\n    let api = `/requests?page=${pagination.current}&limit=${pagination.pageSize}&provinces=${filter.province}&car_types=${filter.car_type}&status=${filter.status}`;\r\n    axios.get(api).then(res => {\r\n            callback(res.data)\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                if (err.response.status === 403) {\r\n                    getToken(getListRequests(pagination, filter, sorter, callback));\r\n                } else {\r\n                    callback(err.response.data);\r\n                }\r\n            }\r\n        }) \r\n}\r\n\r\nexport function createNewRequest(data, callback) {\r\n    const axios = AxiosConfig();\r\n\r\n    axios.post(`/requests`, data).then(res => {\r\n            callback(res.data);\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                if (err.response.status === 403 || err.response.status === 401) {\r\n                    getToken(createNewRequest(data, callback));\r\n                } else {\r\n                    callback(err.response.data);\r\n                }\r\n            }\r\n        })\r\n}\r\n\r\nexport function calculateRequestPrice(data, callback) {\r\n    const axios = AxiosConfig();\r\n\r\n    axios.post(`/requests/calculate-price`, data).then(res => {\r\n            callback(res.data);\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                if (err.response.status === 403 || err.response.status === 401) {\r\n                    getToken(calculateRequestPrice(data, callback));\r\n                } else {\r\n                    callback(err.response.data);\r\n                }\r\n            }\r\n        })\r\n}\r\n\r\nexport function getRequestDetail(id, callback) {\r\n    const axios = AxiosConfig();\r\n\r\n    axios.get(`/requests/${id}`).then(res => {\r\n        callback(res.data);\r\n    })\r\n    .catch(err => {\r\n        if (err.response) {\r\n            if (err.response.status === 403 || err.response.status === 401) {\r\n                getToken(getRequestDetail(id, callback));\r\n            } else {\r\n                callback(err.response.data);\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport function getRequestDetailByCode(code, callback) {\r\n    const axios = AxiosConfig();\r\n\r\n    axios.get(`/requests/check?code=${code}`).then(res => {\r\n        callback(res.data);\r\n    })\r\n    .catch(err => {\r\n        if (err.response) {\r\n            callback(err.response.data);\r\n        }\r\n    })\r\n}\r\n\r\nexport function cancelRequest(id, callback) {\r\n    const axios = AxiosConfig();\r\n\r\n    axios.delete(`/requests/${id}`).then(res => {\r\n        callback(res.data);\r\n    })\r\n    .catch(err => {\r\n        if (err.response) {\r\n            if (err.response.status === 403 || err.response.status === 401) {\r\n                getToken(cancelRequest(id, callback));\r\n            } else {\r\n                callback(err.response.data);\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport function updateRequestDetail(data, callback) {\r\n    const axios = AxiosConfig();\r\n\r\n    axios.put(`/requests/${data.id}`, data).then(res => {\r\n        callback(res.data);\r\n    })\r\n    .catch(err => {\r\n        if (err.response) {\r\n            if (err.response.status === 403) {\r\n                getToken(updateRequestDetail(data, callback));\r\n            } else {\r\n                callback(err.response.data);\r\n            }\r\n        }\r\n    })\r\n}"],"sourceRoot":""}